@{
    Layout = null;
    Page.Response.ContentType = "application/json";
    var viewData = Page.ViewData[BasicController.ViewMessageKey] as ViewMessages; 
    var payment = Page.ViewData.Model as VM.PurchasePayment;
    var cart = payment.Cart;
    if (payment.DeliveryOrder.HourRange == null) {
        payment.DeliveryOrder.HourRange = "0000";
    }
    
    var data = new {
        Type = "purchase/payment",
        Id = cart.CartDefinition.CartId,
        Items = cart.Items.Select(item => new {
            ProductId = item.ProductId,
            ProductName = item.Product.Name,
            RequestAmount = item.RequestAmount,
            Description = item.Description,
            ExternalId1 = item.Product.ExternalId1,
            ExternalId2 = item.Product.ExternalId2,
            ExternalId3 = item.Product.ExternalId3,
            ExternalId4 = item.Product.ExternalId4,
            UnitPriceWithoutTax = item.UnitPrice,
            UnitPriceWithTax = Page.Template.GetUnitPriceWithTax(item.ProductId),
            DiscountPrice = item.DiscountPrice,
            LinePrice = item.LinePrice,
            Tax = item.Tax,
            
        }),
        State = viewData,
        Errors = cart.Errors.Select(error => new {
            Type = error.ErrorType,
            DetailErrorCode = error.DetailErrorCode,
            DetailErrorMessage = error.DetailErrorMessage,
            Item = error.Item?.ProductId,
        }),
        InputUsagePoint = payment.InputUsagePoint,
        DeliveryOrder = new {
            DeliveryDate = payment.DeliveryOrder.DeliveryDate?.ToString("yyyy/MM/dd"),
            payment.DeliveryOrder.DeliveryNo,
            payment.DeliveryOrder.HourRange,
            payment.DeliveryOrder.MailAddr,
            payment.DeliveryOrder.SenderName,
            payment.DeliveryOrder.ShipSourceId,
            payment.DeliveryOrder.WrappingType,
        },
        OrderCustomer = new {
            cart.OrderCustomer.LastName,
            cart.OrderCustomer.FirstName,
            cart.OrderCustomer.LastNameKana,
            cart.OrderCustomer.FirstNameKana,
            cart.OrderCustomer.EmailAddr,
            cart.OrderCustomer.IsGuest,
            cart.OrderCustomer.MemberRank,
            cart.OrderCustomer.MemberStatus,
            cart.OrderCustomer.PaymentDetail,
            cart.OrderCustomer.PaymentSlipNumber,
            cart.OrderCustomer.PaymentSlipUrl,
            cart.OrderCustomer.AutoCancelDate,
        },
        PaymentMethod = payment.PaymentMethod,
        LocalStoreCardDisplayNo = payment.LocalStoreCardDisplayNo,
        IsEasyCardEntry = payment.IsEasyCardEntry,
        ServiceValues = payment.ServiceValues,
    };
    @:@Raw(Jil.JSON.Serialize(data, Jil.Options.ISO8601CamelCase))
}
