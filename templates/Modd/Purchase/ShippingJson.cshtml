@{
    Layout = null;
    Page.Response.ContentType = "application/json";
    var viewData = Page.ViewData[BasicController.ViewMessageKey] as ViewMessages; 
    var shipping = Page.ViewData.Model as VM.PurchaseShipping;
    var cart = shipping.Cart;
    
    var data = new {
        Type = "purchase/shipping",
        Id = cart.CartDefinition.CartId,
        Items = cart.Items.Select(item => new {
            ProductId = item.ProductId,
            ProductName = item.Product.Name,
            RequestAmount = item.RequestAmount,
            Description = item.Description,
            ExternalId1 = item.Product.ExternalId1,
            ExternalId2 = item.Product.ExternalId2,
            ExternalId3 = item.Product.ExternalId3,
            ExternalId4 = item.Product.ExternalId4,
            UnitPriceWithoutTax = item.UnitPrice,
            UnitPriceWithTax = Page.Template.GetUnitPriceWithTax(item.ProductId),
            DiscountPrice = item.DiscountPrice,
            LinePrice = item.LinePrice,
            Tax = item.Tax,
            
        }),
        State = viewData,
        Errors = cart.Errors.Select(error => new {
            Type = error.ErrorType,
            DetailErrorCode = error.DetailErrorCode,
            DetailErrorMessage = error.DetailErrorMessage,
            Item = error.Item?.ProductId,
        }),
        Customer = shipping.Customer,
        OrderCustomerOrderedAddress = shipping.OrderCustomerOrderedAddress,
        DeliveryOrderAddress = shipping.DeliveryOrderAddress,
        DeliveryMethod = shipping.DeliveryMethod,
        ServiceValues = shipping.ServiceValues,
        HasDestinationAddress = shipping.DeliveryOrderAddress.ToString() != shipping.OrderCustomerOrderedAddress.ToString()
    };
    @:@Raw(Jil.JSON.Serialize(data, Jil.Options.ISO8601CamelCase))
}