@{
    Layout = null;
    Page.Response.ContentType = "application/json";
    var viewData = Page.ViewData[BasicController.ViewMessageKey] as ViewMessages;
    var delivery = Page.ViewData.Model as VM.HistoryDelivery;
    var cart = delivery.Cart as HistoryCart;
    var tag = Page.Html.SessionAntiForgeryToken().ToString();
    var token = Regex.Match(tag, @"value=""(.*?)""").Groups[1].Value;
    var hasChanges = cart.Original != null && (
            cart.Original.PaymentMethod != cart.PaymentMethod
        ||  cart.Original.OrderCustomer.PaymentDetail != cart.OrderCustomer.PaymentDetail
        ||  cart.Original.OrderCustomer.EmailAddr != cart.OrderCustomer.EmailAddr
        ||  cart.Original.DeliveryOrderAddress.ToString() != cart.DeliveryOrderAddress.ToString()
        ||  cart.Original.DeliveryOrderAddress.Tel != cart.DeliveryOrderAddress.Tel
        ||  cart.Original.DeliveryOrderAddress.Recipientlastname != cart.DeliveryOrderAddress.Recipientlastname
        ||  cart.Original.DeliveryOrderAddress.Recipientfirstname != cart.DeliveryOrderAddress.Recipientfirstname
        ||  cart.Original.DeliveryOrderAddress.Recipientlastnamekana != cart.DeliveryOrderAddress.Recipientlastnamekana
        ||  cart.Original.DeliveryOrderAddress.Recipientfirstnamekana != cart.DeliveryOrderAddress.Recipientfirstnamekana
        ||  cart.Original.DeliveryOrder.DeliveryDate != cart.DeliveryOrder.DeliveryDate
        ||  cart.Original.DeliveryOrder.HourRange != cart.DeliveryOrder.HourRange
        ||  cart.Original.DeliveryOrder.WrappingType != cart.DeliveryOrder.WrappingType
        ||  cart.Original.DeliveryOrder.SenderName != cart.DeliveryOrder.SenderName
        ||  cart.Original.ServiceValues.Keys.Any(key => cart.Original.ServiceValues[key] != cart.ServiceValues[key])
    );
    
    var data = new {
        Type = "order/historydelivery",
        Id = cart.OrderId,
        cart.OrderDate,
        cart.OrderStatus,
        cart.TotalPayment,
        cart.PaymentMethod,
        cart.PaymentStatus,
        cart.Subtotal,
        cart.DiscountPrice,
        cart.DeliveryCharge,
        cart.TotalUsagePoint,
        cart.ChargePointSummary,
        cart.CanCancel,
        cart.CanModify,
        CanModifyPaymentMethod = cart.CanModifyPaymentMethod(),
        Items = cart.ExpandItems.Select(item => new {
            OrderLineType = item.OrderLineType,
            ProductId = item.ProductId,
            ProductName = item.Product.Name,
            RequestAmount = item.RequestAmount,
            Description = item.Description,
            ExternalId1 = item.Product.ExternalId1,
            ExternalId2 = item.Product.ExternalId2,
            ExternalId3 = item.Product.ExternalId3,
            ExternalId4 = item.Product.ExternalId4,
            UnitPriceWithoutTax = item.UnitPrice,
            UnitPriceWithTax = (item.LinePrice + item.DiscountPrice) / item.OrderAmount,
            DiscountPrice = item.DiscountPrice,
            LinePrice = item.LinePrice,
            Tax = item.Tax,
            
        }),
        State = viewData,
        Errors = cart.Errors.Select(error => new {
            Type = error.ErrorType,
            DetailErrorCode = error.DetailErrorCode,
            DetailErrorMessage = error.DetailErrorMessage,
            Item = error.Item?.ProductId,
        }),
        cart.DeliveryOrder,
        cart.DeliveryOrderAddress,
        OrderCustomer = new {
            cart.OrderCustomer.LastName,
            cart.OrderCustomer.FirstName,
            cart.OrderCustomer.LastNameKana,
            cart.OrderCustomer.FirstNameKana,
            cart.OrderCustomer.EmailAddr,
            cart.OrderCustomer.IsGuest,
            cart.OrderCustomer.MemberRank,
            cart.OrderCustomer.MemberStatus,
            cart.OrderCustomer.PaymentDetail,
            cart.OrderCustomer.PaymentSlipNumber,
            cart.OrderCustomer.PaymentSlipUrl,
            cart.OrderCustomer.AutoCancelDate,
        },
        cart.OrderCustomerOrderedAddress,
        cart.OrderCustomerInvoiceAddress,
        cart.ServiceValues,
        Token = token,
        HasChanges = hasChanges,
    };
    @:@Raw(Jil.JSON.Serialize(data, Jil.Options.ISO8601CamelCase))
}